# -*- coding: utf-8 -*-
"""malarial-cell-classification-no-pretrained-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rDlkqr5ZNGeHbiDjwJa0i7HOis_NX6Qk
"""

from google.colab import drive
drive.mount('/content/drive')

pip install opencv-python

pip install tensorflow

############ Libraries ############
import os
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import cv2
import math

import tensorflow as tf
import tensorflow.keras.layers as layers
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical, Sequence
from tensorflow.keras.models import Model, load_model
from sklearn.metrics import accuracy_score
from tqdm import tqdm

pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd D:\Manu sir\Malaria\new_cell_images\

image_dir = '' 
parasitized_img = os.listdir(image_dir + 'Parasitized/') ### image files
uninfected_img = os.listdir(image_dir + 'Uninfected/') ### image files

print(len(parasitized_img))

for idx, image_name in tqdm(enumerate(parasitized_img)):
    if image_name.split('.')[1]=='png':
        img=cv2.imread(image_dir + 'Parasitized/'+image_name)
        print(img.shape)
        break

"""# Combining parasitized and uninfected images with labelling"""

dataset = []
label = []
un = []
par = []

############ loading parasitized images in dataset list ##############
for idx, image_name in tqdm(enumerate(parasitized_img)):
    if image_name.split('.')[1]=='png':
        image = cv2.imread(image_dir + 'Parasitized/'+image_name)
        image = Image.fromarray(image, 'RGB')
        #image = image.resize((64,64))
        un.append(np.array(image))
        #label.append(0)

############ loading uninfected images in dataset list ##############
for idx, image_name in tqdm(enumerate(uninfected_img)):
    if image_name.split('.')[1]=='png':
        image = cv2.imread(image_dir + 'Uninfected/'+image_name)
        image = Image.fromarray(image, 'RGB')
        #image = image.resize((64,64))
        par.append(np.array(image))
        #label.append(1)

print(len(un))

len(dataset), len(label)

ov_images = un + par

labels = ([1]*(len(os.listdir(image_dir + 'Uninfected/'))-1))+([0]*(len(os.listdir(image_dir + 'Parasitized/'))-1))

ov_images=np.array(ov_images)

labels=np.array(labels)

ov_images=ov_images/255

from sklearn.utils import shuffle

ov_images, labels = shuffle(ov_images, labels)

dataset

X_train, X_test, y_train, y_test = train_test_split(ov_images, labels, test_size=0.2, random_state=69)

"""# Modelling"""

model1 = tf.keras.Sequential([
        layers.Input(par[0].shape),
        layers.Conv2D(32,kernel_size=3,activation='relu',padding='same'),
        layers.MaxPooling2D(pool_size=2),
        layers.BatchNormalization(axis=-1),
        layers.Dropout(rate=0.2),


        layers.Conv2D(32,kernel_size=3,activation='relu',padding='same'),
        layers.MaxPooling2D(pool_size=2),
        layers.BatchNormalization(axis=-1),
        layers.Dropout(rate=0.2),

        layers.Flatten(),

        layers.Dense(512,activation='relu'),
        layers.BatchNormalization(axis=-1),
        layers.Dropout(rate=0.2),

        layers.Dense(128,activation='relu'),
        layers.Dense(2,activation='softmax'),


])
model1.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model1.summary()

from tensorflow.keras.callbacks import ReduceLROnPlateau
learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', patience = 5, verbose=1, factor=0.3, min_lr=0.000001)

X_train

"""# Training"""

history = model1.fit(X_train, y_train, batch_size = 64, verbose = 1, epochs = 12, validation_split = 0.1, shuffle = False, callbacks = [learning_rate_reduction])

preds = model1.predict(X_test)

preds = preds.argmax(axis=1)

y_test = y_test.argmax(axis=1)

score = accuracy_score(y_test,preds)

score ## acccuracy

img = X_test[0]
plt.imshow(img)
plt.axis('off')

fig, axs = plt.subplots(2, 2,figsize=(12, 8))

axs[0, 0].imshow(X_test[0])
axs[0,0].set_title(f'Preds: {preds[0]}, truth: {y_test[0]}')
axs[0, 1].imshow(X_test[1])
axs[0,1].set_title(f'Preds: {preds[1]}, truth: {y_test[1]}')
axs[1, 0].imshow(X_test[2])
axs[1,0].set_title(f'Preds: {preds[2]}, truth: {y_test[2]}')
axs[1, 1].imshow(X_test[3])
axs[1,1].set_title(f'Preds: {preds[3]}, truth: {y_test[3]}')
plt.figure(figsize=(12,23))
plt.show()

